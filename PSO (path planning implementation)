import numpy as np
import random

# User input for grid size
grid_width = int(input("Enter grid width (e.g., 40): "))
grid_height = int(input("Enter grid height (e.g., 40): "))
grid_size = (grid_width, grid_height)

# Initialize the obstacle map
obstacle_map = np.zeros(grid_size)

# User input for the number of random obstacles
num_obstacles = int(input("Enter the number of random obstacles (e.g., 900): "))

# Add random obstacles
for _ in range(num_obstacles):
    x = random.randint(0, grid_size[0] - 1)
    y = random.randint(0, grid_size[1] - 1)
    obstacle_map[x, y] = 1

# Add multiple fixed obstacle regions
print("Adding fixed obstacle regions.")
fixed_region_1 = input("Enter fixed region 1 as start_x:end_x, start_y:end_y (e.g., 5:10, 5:10): ")
fixed_region_2 = input("Enter fixed region 2 as start_x:end_x, start_y:end_y (e.g., 12:17, 12:17): ")

# Parse the fixed regions and apply them
start_x1, end_x1, start_y1, end_y1 = map(int, fixed_region_1.replace(" ", "").replace(",", ":").split(":"))
obstacle_map[start_x1:end_x1, start_y1:end_y1] = 1

start_x2, end_x2, start_y2, end_y2 = map(int, fixed_region_2.replace(" ", "").replace(",", ":").split(":"))
obstacle_map[start_x2:end_x2, start_y2:end_y2] = 1

# User input for PSO parameters
num_particles = int(input("Enter the number of particles (e.g., 20): "))
num_iterations = int(input("Enter the number of iterations (e.g., 30): "))
inertia_weight = float(input("Enter the inertia weight (e.g., 0.9): "))
cognitive_coeff = float(input("Enter the cognitive coefficient (e.g., 1.5): "))
social_coeff = float(input("Enter the social coefficient (e.g., 1.5): "))

# Starting and target positions
print("Specify start and target positions.")
start_x, start_y = map(int, input("Enter start position as x, y (e.g., 0, 0): ").split(","))
target_x, target_y = map(int, input("Enter target position as x, y (e.g., 39, 39): ").split(","))
start_pos = np.array([start_x, start_y])
target_pos = np.array([target_x, target_y])

# Define the fitness function (minimize distance to target while avoiding obstacles)
def fitness(position):
    x, y = int(position[0]), int(position[1])
    # Penalty for invalid or obstacle positions
    if x < 0 or y < 0 or x >= grid_size[0] or y >= grid_size[1] or obstacle_map[x, y] == 1:
        return 1e6  # High penalty for invalid positions
    # Euclidean distance to target
    return np.linalg.norm(position - target_pos)

# Initialize particles with random positions and velocities
particles = []
while len(particles) < num_particles:
    x = random.uniform(0, grid_size[0] - 1)
    y = random.uniform(0, grid_size[1] - 1)
    if obstacle_map[int(x), int(y)] == 0:  # Ensure particles start in free space
        particles.append(np.array([x, y]))

velocities = [np.random.uniform(-1, 1, 2) for _ in range(num_particles)]
personal_best_positions = particles[:]
personal_best_scores = [fitness(p) for p in particles]

# Global best position and score
global_best_position = min(personal_best_positions, key=fitness)
global_best_score = fitness(global_best_position)

# Initialize path
path = [start_pos]

# Main PSO Loop
for iteration in range(num_iterations):
    for i, particle in enumerate(particles):
        # Update the velocity
        inertia = inertia_weight * velocities[i]
        cognitive = cognitive_coeff * random.random() * (personal_best_positions[i] - particle)
        social = social_coeff * random.random() * (global_best_position - particle)
        velocities[i] = inertia + cognitive + social

        # Update the particle's position
        particles[i] = particles[i] + velocities[i]

        # Keep particles within grid bounds
        particles[i] = np.clip(particles[i], [0, 0], [grid_size[0] - 1, grid_size[1] - 1])

        # Evaluate fitness
        current_fitness = fitness(particles[i])

        # Update personal best
        if current_fitness < personal_best_scores[i]:
            personal_best_positions[i] = particles[i]
            personal_best_scores[i] = current_fitness

        # Update global best
        if current_fitness < global_best_score:
            global_best_position = particles[i]
            global_best_score = current_fitness

    # Append the global best position to the path
    path.append(global_best_position.copy())

    print(f"Iteration {iteration + 1}: Best Score = {global_best_score:.4f}, Best Position = {global_best_position}")

# Output the best solution found
print("\nBest Solution Found:")
print(f"Position = {global_best_position}, Distance to Target = {global_best_score:.4f}")

# Print the path
print("\nPlanned Path:")
for step, position in enumerate(path):
    print(f"Step {step}: {position}")
